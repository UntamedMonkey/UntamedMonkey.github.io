[{"title":"C++容器总结","url":"/2022/06/03/C++容器总结/","content":"\n### [STL简介:](geeksforgeeks.org/the-c-standard-template-library-stl)\nC++的标准模板类库，包含常见数据结构及函数。主要包括:\n+ 容器\n+ 算法\n+ 函数（Functions）\n+ 迭代器\n\n### 1. 容器：\n+ 序列式容器:基本的容器\n   + arrays||at();[];front();back();size();empty();fill()||比C自带的数组好\n   + vector||asign();at();[];front();back();begin();end;size();max_size();capacity();resize(n);empty();shrink_to_fit();push_back();pop_back();insert();erase();clear();\n   + forward_list||assign();push_front();emplace_front();pop_front();insert_after();emplace_after(); erase_after(); remove(); remove_if();clear();\n   + deque\n   + list\n   \n+ 容器适配器:序列式容器的扩展\n   + queue\n   + priority_queue\n   + stack\n+ 关联式容器:非序列式容器，基于自平衡二叉树\n   +  set\n   +  multiset\n   +  map\n   +  multimap\n+ 无序关联式容器:非序列式容器，基于哈希表\n   +  unordered_set\n   +  unordered_multiset\n   +  unordered_map\n   +  unordered_multimap\n\n\n### 2. 算法：\n+ sort(startaddress, endaddress)\n","tags":["学习笔记","算法题"]},{"title":"面试算法刷题总结","url":"/2022/06/03/algo/","content":"# 0. 刷题总结\n- 熟悉常用库函数；熟悉数据结构和算法；提高用程序解决复杂问题的能力；提高编程能力和速度。可以参考：[代码随想录](https://www.programmercarl.com/)；[算法小抄](https://github.com/labuladong/fucking-algorithm)。\n- 代码命名、格式、风格参考最佳实践，提高可读性，降低出错率。可以参考：[python最佳实践](https://pythonguidecn.readthedocs.io/zh/latest/)；[C++风格指南](https://zh-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/contents/)；[C++最佳实践](https://github.com/cpp-best-practices/cppbestpractices)；[腾讯代码安全指南](https://github.com/Tencent/secguide)。\n\n# 1. 算法总结\n### 1.1 算法技巧\n#### 1.1.1 前缀和数组 \n需要频繁计算数组区间和，且数组固定不变：直接转变为前缀和数组,复杂度O(n)>O(1)  \n  [区域和检索](https://leetcode.cn/problems/range-sum-query-immutable/) | [二维区域和检索](https://leetcode.cn/problems/range-sum-query-2d-immutable/)\n#### 1.1.2 差分数组 \n频繁进行区间修改时维护数组的值：转变为差分数组，复杂度O(n)>O(1)  \n[拼车](https://leetcode.cn/problems/car-pooling/) | [航班预订统计](https://leetcode.cn/problems/corporate-flight-bookings/)\n#### 1.1.3 链表双指针 \n判断/寻找链表中的交点：使用双指针遍历链表并创造条件让指针相遇，空间复杂度O(n)>O(1)  \n[环形链表](https://leetcode.cn/problems/linked-list-cycle/) | [环形链表2](https://leetcode.cn/problems/linked-list-cycle-ii/) | [相交链表](https://leetcode.cn/problems/intersection-of-two-linked-lists/)\n#### 1.1.4 数组双指针 \n数组寻找受限极值/特定值：发掘单调性规律，让遍历每一步不回头，时间复杂度O(n)>O(1)  \n[有序数组-两数之和](https://leetcode.cn/problems/two-sum-ii-input-array-is-sorted/) | [盛最多水的容器](https://leetcode.cn/problems/container-with-most-water/) | [搜索二维矩阵](https://leetcode.cn/problems/search-a-2d-matrix-ii/) | []()\n#### 1.1.5 滑动窗口 \n寻找满足特定条件的最小字串：控制左右边界缩放，让遍历有序，时间复杂度O(n^2)>O(n)  \n[无重复字符的最长字串](https://leetcode.cn/problems/longest-substring-without-repeating-characters/) | [串联所有单词的子串\n](https://leetcode.cn/problems/substring-with-concatenation-of-all-words/) | [长度最小的子数组](https://leetcode.cn/problems/minimum-size-subarray-sum/) | [包含排列的子串](https://leetcode.cn/problems/permutation-in-string/) | [最小覆盖字串](https://leetcode.cn/problems/minimum-window-substring/) [最短超串](https://leetcode.cn/problems/shortest-supersequence-lcci/) | [找到字符串中所有字母异位词](https://leetcode.cn/problems/find-all-anagrams-in-a-string/)\n#### 1.1.6  二分搜索 \n有序数组寻找特定值：利用单调性每次查找时剔除一侧的搜索空间，时间复杂度O(n)>O(log(n))  \n[二分查找](https://leetcode.cn/problems/binary-search/) | [二分查找第一个和最后一个位置](https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/) | [送包裹](https://leetcode.cn/problems/capacity-to-ship-packages-within-d-days/) | [吃香蕉](https://leetcode.cn/problems/koko-eating-bananas/) | [分割数组最大值](https://leetcode.cn/problems/split-array-largest-sum/)、\n#### 1.1.7  单调栈 \n利用单调栈维护最大值，时间复杂度O(n^2)>O(n)  \n[下一个更大的元素](https://leetcode.cn/problems/next-greater-element-i/) | [下一个更大的元素2](https://leetcode.cn/problems/next-greater-element-ii/) | [每日温度](https://leetcode.cn/problems/daily-temperatures/) | [接雨水](https://leetcode.cn/problems/trapping-rain-water/) | [队列中可以看到的人数](https://leetcode.cn/problems/number-of-visible-people-in-a-queue/) | [链表下一个更大的节点](https://leetcode.cn/problems/next-greater-node-in-linked-list/) | [股票价格的跨度](https://leetcode.cn/problems/online-stock-span/) \n| []()\n#### 1.1.7  单调队列\n利用单调队列维护最大值，时间复杂度O(n)>O(1)     \n[滑动窗口最大值](https://leetcode.cn/problems/sliding-window-maximum/) | [环形子数组最大和](https://leetcode.cn/problems/maximum-sum-circular-subarray/)\n#### 1.1.8 并查集\nbalabala\n[被围绕的区域](https://leetcode.cn/problems/surrounded-regions/) | [并查集](https://leetcode.cn/tag/union-find/problemset/)\n\n\n### 1.2 算法思想\n#### 1.2.1 递归\n[二叉树](https://leetcode.cn/tag/binary-tree/problemset/) | [递归](https://leetcode.cn/tag/recursion/problemset/)[图](https://leetcode.cn/tag/graph/problemset/)\n#### 1.2.2 回溯\n[回溯](https://leetcode.cn/tag/backtracking/problemset/) | [bfs](https://leetcode.cn/tag/breadth-first-search/problemset/) | [dfs](https://leetcode.cn/tag/depth-first-search/problemset/)\n#### 1.2.3 贪心\n[贪心](https://leetcode.cn/tag/greedy/problemset/)\n#### 1.2.4 动态规划\n[动态规划](https://leetcode.cn/tag/dynamic-programming/problemset/)\n\n# 2. 题目记录\n很多题目未必包含精巧/通用的算法，而是需要完整的实现功能或者针对性的复杂度优化  \n\n[翻转数组](https://leetcode.cn/problems/minimum-number-of-flips-to-convert-binary-matrix-to-zero-matrix/)  \n在暴力解法的基础上，利用第一行确定整个矩阵，从而压缩搜索空间，降低复杂度。  \n\n[LRU缓存](https://leetcode.cn/problems/lru-cache/)  \n\n[购物单](https://www.nowcoder.com/practice/f9c6f980eeec43ef85be20755ddbeaf4?tpId=37&tqId=21239&rp=1&ru=/exam/oj/ta&qru=/exam/oj/ta&sourceUrl=%2Fexam%2Foj%2Fta%3FtpId%3D37&difficulty=undefined&judgeStatus=undefined&tags=&title=)  \n动态规划01背包的一个变体，每个物体包含多种可能的选择。  \n\n[求解立方根](https://www.nowcoder.com/practice/caf35ae421194a1090c22fe223357dca?tpId=37&tqId=21330&rp=1&ru=/exam/oj/ta&qru=/exam/oj/ta&sourceUrl=%2Fexam%2Foj%2Fta%3Fdifficulty%3D3%26page%3D1%26pageSize%3D50%26search%3D%26tpId%3D37%26type%3D37&difficulty=3&judgeStatus=undefined&tags=&title=)  \n二分法或者牛顿法  \n\n[迷宫](https://www.nowcoder.com/practice/cf24906056f4488c9ddb132f317e03bc?tpId=37&tqId=21266&rp=1&ru=/exam/oj/ta&qru=/exam/oj/ta&sourceUrl=%2Fexam%2Foj%2Fta%3Fdifficulty%3D3%26page%3D1%26pageSize%3D50%26search%3D%26tpId%3D37%26type%3D37&difficulty=3&judgeStatus=undefined&tags=&title=)  \n回溯\n","tags":["学习笔记","算法题"]},{"title":"Hexo Quick Start","url":"/2021/09/20/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n"}]